# Generated from FactoryC.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,24,168,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,1,
        0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,
        9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,
        1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,
        1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,
        1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,22,5,22,137,
        8,22,10,22,12,22,140,9,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,5,23,
        149,8,23,10,23,12,23,152,9,23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,
        1,25,5,25,162,8,25,10,25,12,25,165,9,25,1,25,1,25,0,0,26,1,1,3,2,
        5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,
        15,31,16,33,17,35,18,37,19,39,20,41,0,43,0,45,21,47,22,49,23,51,
        24,1,0,4,2,0,65,90,97,122,1,0,48,57,3,0,9,10,13,13,32,32,2,0,10,
        10,13,13,172,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
        1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
        1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
        1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
        1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,1,53,
        1,0,0,0,3,55,1,0,0,0,5,57,1,0,0,0,7,59,1,0,0,0,9,61,1,0,0,0,11,63,
        1,0,0,0,13,65,1,0,0,0,15,74,1,0,0,0,17,80,1,0,0,0,19,84,1,0,0,0,
        21,88,1,0,0,0,23,92,1,0,0,0,25,96,1,0,0,0,27,100,1,0,0,0,29,104,
        1,0,0,0,31,108,1,0,0,0,33,112,1,0,0,0,35,116,1,0,0,0,37,120,1,0,
        0,0,39,124,1,0,0,0,41,128,1,0,0,0,43,130,1,0,0,0,45,132,1,0,0,0,
        47,144,1,0,0,0,49,153,1,0,0,0,51,157,1,0,0,0,53,54,5,59,0,0,54,2,
        1,0,0,0,55,56,5,42,0,0,56,4,1,0,0,0,57,58,5,38,0,0,58,6,1,0,0,0,
        59,60,5,43,0,0,60,8,1,0,0,0,61,62,5,45,0,0,62,10,1,0,0,0,63,64,5,
        61,0,0,64,12,1,0,0,0,65,66,5,110,0,0,66,67,5,111,0,0,67,68,5,100,
        0,0,68,69,5,105,0,0,69,70,5,114,0,0,70,71,5,101,0,0,71,72,5,99,0,
        0,72,73,5,116,0,0,73,14,1,0,0,0,74,75,5,115,0,0,75,76,5,104,0,0,
        76,77,5,97,0,0,77,78,5,112,0,0,78,79,5,101,0,0,79,16,1,0,0,0,80,
        81,5,65,0,0,81,82,5,76,0,0,82,83,5,76,0,0,83,18,1,0,0,0,84,85,5,
        78,0,0,85,86,5,79,0,0,86,87,5,78,0,0,87,20,1,0,0,0,88,89,5,83,0,
        0,89,90,5,81,0,0,90,91,5,82,0,0,91,22,1,0,0,0,92,93,5,67,0,0,93,
        94,5,73,0,0,94,95,5,82,0,0,95,24,1,0,0,0,96,97,5,84,0,0,97,98,5,
        76,0,0,98,99,5,83,0,0,99,26,1,0,0,0,100,101,5,84,0,0,101,102,5,82,
        0,0,102,103,5,83,0,0,103,28,1,0,0,0,104,105,5,66,0,0,105,106,5,76,
        0,0,106,107,5,83,0,0,107,30,1,0,0,0,108,109,5,66,0,0,109,110,5,82,
        0,0,110,111,5,83,0,0,111,32,1,0,0,0,112,113,5,84,0,0,113,114,5,76,
        0,0,114,115,5,67,0,0,115,34,1,0,0,0,116,117,5,84,0,0,117,118,5,82,
        0,0,118,119,5,67,0,0,119,36,1,0,0,0,120,121,5,66,0,0,121,122,5,76,
        0,0,122,123,5,67,0,0,123,38,1,0,0,0,124,125,5,66,0,0,125,126,5,82,
        0,0,126,127,5,67,0,0,127,40,1,0,0,0,128,129,7,0,0,0,129,42,1,0,0,
        0,130,131,7,1,0,0,131,44,1,0,0,0,132,138,3,41,20,0,133,137,3,41,
        20,0,134,137,3,43,21,0,135,137,5,95,0,0,136,133,1,0,0,0,136,134,
        1,0,0,0,136,135,1,0,0,0,137,140,1,0,0,0,138,136,1,0,0,0,138,139,
        1,0,0,0,139,141,1,0,0,0,140,138,1,0,0,0,141,142,5,40,0,0,142,143,
        5,41,0,0,143,46,1,0,0,0,144,150,3,41,20,0,145,149,3,41,20,0,146,
        149,3,43,21,0,147,149,5,95,0,0,148,145,1,0,0,0,148,146,1,0,0,0,148,
        147,1,0,0,0,149,152,1,0,0,0,150,148,1,0,0,0,150,151,1,0,0,0,151,
        48,1,0,0,0,152,150,1,0,0,0,153,154,7,2,0,0,154,155,1,0,0,0,155,156,
        6,24,0,0,156,50,1,0,0,0,157,158,5,47,0,0,158,159,5,47,0,0,159,163,
        1,0,0,0,160,162,8,3,0,0,161,160,1,0,0,0,162,165,1,0,0,0,163,161,
        1,0,0,0,163,164,1,0,0,0,164,166,1,0,0,0,165,163,1,0,0,0,166,167,
        6,25,0,0,167,52,1,0,0,0,6,0,136,138,148,150,163,1,6,0,0
    ]

class FactoryCLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    ALL = 9
    NON = 10
    SQR = 11
    CIR = 12
    TLS = 13
    TRS = 14
    BLS = 15
    BRS = 16
    TLC = 17
    TRC = 18
    BLC = 19
    BRC = 20
    FUNCNAME = 21
    VARNAME = 22
    WHITESPACE = 23
    COMMENT = 24

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'*'", "'&'", "'+'", "'-'", "'='", "'nodirect'", "'shape'", 
            "'ALL'", "'NON'", "'SQR'", "'CIR'", "'TLS'", "'TRS'", "'BLS'", 
            "'BRS'", "'TLC'", "'TRC'", "'BLC'", "'BRC'" ]

    symbolicNames = [ "<INVALID>",
            "ALL", "NON", "SQR", "CIR", "TLS", "TRS", "BLS", "BRS", "TLC", 
            "TRC", "BLC", "BRC", "FUNCNAME", "VARNAME", "WHITESPACE", "COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "ALL", "NON", "SQR", "CIR", "TLS", "TRS", "BLS", 
                  "BRS", "TLC", "TRC", "BLC", "BRC", "ALPHA", "DIGIT", "FUNCNAME", 
                  "VARNAME", "WHITESPACE", "COMMENT" ]

    grammarFileName = "FactoryC.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


