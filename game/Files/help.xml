<?xml version="1.0" encoding="UTF-8"?>
<documentation>
<section level="1">
<header>Sandbox Model</header>
<text>Most of the instructions for the factory are written in standard C code. Thus, every code line ends with a semicolon, and to declare a variable the type is needed.</text>
<text>However, in this exercise the variables are already declared for you, namely variable_0, variable_1, and variable_2 of type "Shape".</text>
<text>Shapes that can be generated in this exercise are as follows:</text>
<text>CIR represents circle.</text> <text>SQR represents square.</text> <text>ALL represents a square and circle in the same box.</text>
</section>
<section level="2">
<header> Basic Shapes </header>
<text>In this game parts of the shape are broken into smaller parts .</text>
<code>! ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ </code>
<text> Here are acronyms associated with a SQUARE shape:</text> 
<text> TLS: Top Left Square       and       TLC: Top Left Circle </text> 
<text> TRS: Top Right Square      and       TRC: Top Right Circle</text> 
<text> BRS: Bottom Right Square   and       BRC: Bottom Left Circle</text> 
<text> BLS: Bottom Left Square    and       BLC: Bottom Left Circle</text>
<text> Note: Composition is regarded as an addition therefore to compose a shape on an existing shape for example</text>
<text> For example to compose a circle on variable_0 one would do as follows:</text>
<code> variable_0 = variable_0 + CIR;</code>
</section>
<section level="3">
<header> Shape Cutting </header>
<text> To cut out a circle on variable_0 one would do as follows:</text>
<code> variable_0 = variable_0 - CIR;</code>
</section>
<section level="4">
<header> Shape Composition </header>
<text> Most of the instructions for the factory are written in standard C code.</text>
<text> Regular copying of shape </text>
</section>
<section level="5">
<header> Conveyance </header>
<text> Most of the instructions for the factory are written in standard C code.</text>
<text> In this level it is important to apply the knowledge of pointers including derefencing pointers </text>
<text> For example: </text>
<code> var_0 = var_1;</code>
<code> ptr_0 = &amp;var_0</code>
</section>
<section level="6">
<header> Protected Conveyance </header>
<text> Most of the instructions for the factory are written in standard C code.</text>
<text> Deference in pointers knowledge  is applicable on this level: </text>
<text> </text>
</section>
<section level="7">
<header> Quick Adjustment </header>
<text>Most of the instructions for the factory are written in standard C code.</text>
<section level="8">
<header> Geometric Inverter </header>
<text>Most of the instructions for the factory are written in standard C code.</text>
</section>
</documentation>

